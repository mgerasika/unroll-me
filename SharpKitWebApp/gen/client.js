/* Generated by SharpKit 5 v5.4.4 */
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


if (typeof(SharpKitClient) == "undefined")
    var SharpKitClient = {};
SharpKitClient.client = function (){
    this._clientId = null;
    this._div = null;
    this._figure = SharpKitClient.entity.EState.empty;
    this._table = null;
    this._tableCnt = null;
    this._turn = null;
    this._turnClientId = null;
    this._welcomeDiv = null;
    this.ClientId = null;
};
SharpKitClient.client.inst = new SharpKitClient.client();
SharpKitClient.client.prototype.init = function (){
    this._div = document.createElement('div');
    document.body.appendChild(this._div);
    this._welcomeDiv = document.createElement('div');
    this._div.appendChild(this._welcomeDiv);
    server.connect();
    server.subscribe($CreateAnonymousDelegate(this, function (e){
        var response = e;
        response.Analise();
    }));
    window.addEventListener("unload", $CreateDelegate(this, this.OnBeforeUnload));
};
SharpKitClient.client.prototype.onConnected = function (response){
    this.ClientId = response.ClientId;
    this._welcomeDiv.innerHTML = "Connected.";
    var request = new SharpKitClient.entity.StartGameRequest();
    request.ClientId = this.ClientId;
    server.send(request);
};
SharpKitClient.client.prototype.onDisconected = function (disconnectResponse){
    this._welcomeDiv.innerHTML = "Disconected.";
};
SharpKitClient.client.prototype.onStartGame = function (response){
    this._turnClientId = "";
    this._figure = SharpKitClient.entity.EState.empty;
    this._welcomeDiv.innerHTML = "";
    if (this._welcomeDiv.parentNode != null){
        this._welcomeDiv.parentNode.removeChild(this._welcomeDiv);
    }
    if (null != this._tableCnt && this._tableCnt.parentNode != null){
        this._tableCnt.parentNode.removeChild(this._tableCnt);
    }
    if (null != this._turn && this._turn.parentNode != null){
        this._turn.parentNode.removeChild(this._turn);
    }
    this._turn = document.createElement('div');
    js.addClass(this._turn, "turn");
    this._div.appendChild(this._turn);
    this._tableCnt = document.createElement('span');
    js.addClass(this._tableCnt, "tableCnt");
    this._table = document.createElement('table');
    this._tableCnt.appendChild(this._table);
    js.attach(this._table, "click", $CreateDelegate(this, this.onTableClick));
    js.attach(this._table, "touchstart", $CreateDelegate(this, this.onTableClick));
    js.addClass(this._table, "table");
    for (var y = 0; y < 3; ++y){
        var row = document.createElement('tr');
        this._table.appendChild(row);
        row.setAttribute("rowIdx", y.toString());
        for (var x = 0; x < 3; ++x){
            var cell = document.createElement('td');
            row.appendChild(cell);
            js.addClass(cell, "tableCell");
        }
    }
    this._div.appendChild(this._tableCnt);
    this._figure = (response.FirstClientId == this.ClientId) ? SharpKitClient.entity.EState.blue : SharpKitClient.entity.EState.red;
    this._turnClientId = response.FirstClientId;
    this.RefreshTurn();
};
SharpKitClient.client.prototype.onTurn = function (response){
    var message = response.message;
    if (response.message == ""){
        this.renderFigure(response);
        this._turnClientId = response.nextClientId;
        this.RefreshTurn();
    }
    else if (response.message == "turn again"){
    }
    else if (message.indexOf("winn") == 0){
        js.addClass(this._table, response.message);
        this.renderFigure(response);
        if (response.ClientId == this.ClientId){
            window.alert("You winn");
        }
        else {
            window.alert("You loss");
        }
        var request = new SharpKitClient.entity.ResetGameRequest();
        request.ClientId = this.ClientId;
        request.GameId = response.GameId;
        server.send(request);
    }
    else if (response.message == "equal"){
        this.renderFigure(response);
        window.alert("equal");
    }
};
SharpKitClient.client.prototype.onResetGame = function (resetGameResponse){
    console.log("reset game");
    var request = new SharpKitClient.entity.StartGameRequest();
    request.ClientId = this.ClientId;
    request.GameId = resetGameResponse.GameId;
    server.send(request);
};
SharpKitClient.client.prototype.renderFigure = function (response){
    var row = this._table.rows[response.y];
    var cell = row.cells[response.x];
    if ((response.figure == SharpKitClient.entity.EState.blue)){
        js.addClass(cell, "tableCellX");
    }
    else {
        js.addClass(cell, "tableCell0");
    }
};
SharpKitClient.client.prototype.ensureClientId = function (){
    var url = window.document.location.href;
    var idx = url.lastIndexOf("?") + 1;
    if (idx > 0){
        var name = url.substring(idx);
        var arr = name.split("=");
        this._clientId = arr[1].toString();
    }
    else if (localStorage.getItem("clientId") != null){
        this._clientId = localStorage.getItem("clientId");
    }
    else {
        this._clientId = js.createGuid();
    }
    localStorage.setItem("clientId", this._clientId);
};
SharpKitClient.client.prototype.RefreshTurn = function (){
    if (this._turnClientId == this.ClientId){
        js.removeClass(this._turn, "notMyTurn");
        js.addClass(this._turn, "myTurn");
    }
    else {
        js.removeClass(this._turn, "myTurn");
        js.addClass(this._turn, "notMyTurn");
    }
};
SharpKitClient.client.prototype.onTableClick = function (evt){
    if (this._turnClientId == this.ClientId){
        var el = evt.target;
        if (el instanceof HTMLTableCellElement){
            var cell = el;
            var row = cell.parentNode;
            var request = new SharpKitClient.entity.TurnRequest();
            request.x = cell.cellIndex;
            request.y = parseInt(row.getAttribute("rowIdx"), 10);
            request.ClientId = this.ClientId;
            request.figure = this._figure;
            server.send(request);
        }
    }
};
SharpKitClient.client.prototype.OnBeforeUnload = function (evt){
    server.disconnect();
};


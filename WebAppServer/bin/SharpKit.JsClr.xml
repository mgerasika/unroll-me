<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpKit.JsClr</name>
    </assembly>
    <members>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, 
            and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <c ref="System.Collections.Generic.IEnumerable{T}">IEnumerable&lt;T&gt;</c> to return the single element of.</param>
            <returns>The single element of the input sequence, or default(TSource) if the sequence contains no elements.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, 
            and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <c ref="System.Collections.Generic.IEnumerable{T}">IEnumerable&lt;T&gt;</c> to return the single element of.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <returns>The single element of the input sequence, or default(TSource) if the sequence contains no elements.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; 
            this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <c ref="System.Collections.Generic.IEnumerable{T}">IEnumerable&lt;T&gt;</c> to return the single element of.</param>
            <returns>The single element of the input sequence, or default(TSource) if the sequence contains no elements.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty;
            this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">An <c ref="System.Collections.Generic.IEnumerable{T}">IEnumerable&lt;T&gt;</c> to return the single element of.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <returns>The single element of the input sequence, or default(TSource) if the sequence contains no elements.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplEnum.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <returns>A string array of the names of the constants in enumType.</returns>
            <exception cref="T:System.ArgumentNullException"><para>enumType</para> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplEnum.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>A string array of the names of the constants in enumType.</returns>
            <exception cref="T:System.ArgumentNullException"><para>enumType</para> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplEnum.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>An array that contains the values of the constants in enumType.</returns>
            <exception cref="T:System.ArgumentNullException"><para>enumType</para> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplEnum.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentNullException"><para>enumType</para> or <para>value</para> is null.</exception>
            <exception cref="T:System.ArgumentException"><para>enumType</para> or <para>value</para> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase"><value>true</value> to ignore case; <value>false</value> to regard case. </param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentNullException"><para>enumType</para> or <para>value</para> is null.</exception>
            <exception cref="T:System.ArgumentException"><para>enumType</para> or <para>value</para> is null.</exception>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplHashSet`1">
            <summary>Represents a set of values.</summary>
            <typeparam name="T">The type of elements in the hast set.</typeparam>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplISet`1">
            <summary>Provides the base interface for the abstraction of sets.</summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEnumerable`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <typeparamref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplICollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplICollection`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplICollection`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.Add(`0)">
            <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added. </summary>
            <returns>true if the element is added to the set; false if the element is already in the set.</returns>
            <param name="item">The element to add to the set.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.UnionWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IntersectWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.ExceptWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Removes all elements in the specified collection from the current set.</summary>
            <param name="other">The collection of items to remove from the set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.SymmetricExceptWith(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsSubsetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether a set is a subset of a specified collection.</summary>
            <returns>true if the current set is a subset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsSupersetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a superset of a specified collection.</summary>
            <returns>true if the current set is a superset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsProperSupersetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a correct superset of a specified collection.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ISet`1" /> object is a correct superset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set. </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.IsProperSubsetOf(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set is a property (strict) subset of a specified collection.</summary>
            <returns>true if the current set is a correct subset of <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.Overlaps(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set overlaps with the specified collection.</summary>
            <returns>true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplISet`1.SetEquals(SharpKit.JavaScript.Private.JsImplIEnumerable{`0})">
            <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
            <returns>true if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``1(``0)">
            <summary>Creates a new 1-tuple, or singleton.</summary>
            <returns>A tuple whose value is (<paramref name="item1" />).</returns>
            <param name="item1">The value of the only component of the tuple.</param>
            <typeparam name="T1">The type of the only component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``2(``0,``1)">
            <summary>Creates a new 2-tuple, or pair.</summary>
            <returns>A 2-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``3(``0,``1,``2)">
            <summary>Creates a new 3-tuple, or triple.</summary>
            <returns>A 3-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>Creates a new 4-tuple, or quadruple.</summary>
            <returns>A 4-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.  </typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>Creates a new 5-tuple, or quintuple.</summary>
            <returns>A 5-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>Creates a new 6-tuple, or sextuple.</summary>
            <returns>A 6-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>Creates a new 7-tuple, or septuple.</summary>
            <returns>A 7-tuple whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />).</returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Creates a new 8-tuple, or octuple.</summary>
            <returns>An 8-tuple (octuple) whose value is (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />). </returns>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <param name="item8">The value of the eighth component of the tuple.</param>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Compilation.JsTypeHelper._GetTypeWithArguments(System.String,System.Boolean)">
            <summary>
            returns null if no args exist in name.
            </summary>
            <param name="typeName"></param>
            <param name="throwIfNotFound"></param>
            <returns></returns>
        </member>
        <member name="T:SharpKit.Web.JsRuntime">
            <summary>
            The client side JavaScript .net runtime, loading and running js .net runtime modules and assembies
            </summary>
        </member>
        <member name="M:SharpKit.Web.JsRuntime.Start">
            <summary>
            Starts the js runtime, binding all currently included js modules / assemblies (.js files),
            this function can be called from javascript using this code:
            <code>JsRuntime.Start();</code>
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMemberInfo.GetBaseMember">
            <summary>
            Returns the base member for custom attribute inheritance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplPropertyInfo.op_Equality(SharpKit.JavaScript.Private.JsImplPropertyInfo,SharpKit.JavaScript.Private.JsImplPropertyInfo)">
            <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</summary>
            <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, false.</returns>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplPropertyInfo.op_Inequality(SharpKit.JavaScript.Private.JsImplPropertyInfo,SharpKit.JavaScript.Private.JsImplPropertyInfo)">
            <summary>Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</summary>
            <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, false.</returns>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>When overridden in a derived class, returns the value of a property having the specified binding, index, and <see cref="T:System.Globalization.CultureInfo" />.</summary>
            <returns>The property value for <paramref name="obj" />.</returns>
            <param name="obj">The object whose property value will be returned. </param>
            <param name="invokeAttr">The invocation attribute. This must be a bit flag from BindingFlags : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
            <param name="culture">The CultureInfo object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
            <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception>
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>When overridden in a derived class, sets the property value for the given object to the given value.</summary>
            <param name="obj">The object whose property value will be set. </param>
            <param name="value">The new value for this property. </param>
            <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. A suitable invocation attribute must be specified. If a static member is to be invoked, the Static flag of BindingFlags must be set. </param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection. If <paramref name="binder" /> is null, the default binder is used. </param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the CultureInfo.Parent method will be called successively in search of a match. If this value is null, the CultureInfo is obtained from the CultureInfo.CurrentUICulture property. </param>
            <exception cref="T:System.ArgumentException">The <paramref name="index" /> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception>
            <exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is null. </exception>
            <exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes. </exception>
            <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</exception>
        </member>
        <member name="T:SharpKit.JavaScript.Compilation.JsType">
            <summary>
            A type used internally by the Js Type System
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(SharpKit.JavaScript.JsArray)">
            <summary>
            An array to be copied to the array being constructed. 
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(System.Int32)">
            <summary>
            The size of the array. As arrays are zero-based, created elements will have indexes from zero to size -1. 
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SharpKit.JavaScript.JsExtendedArray.#ctor(System.Object[])">
            <summary>
            A typed array that contains all the parameters passed to the constructor. These parameters are used as the first elements of the array. 
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplIEnumerator`1.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplIEqualityComparer">
            <summary>Defines methods to support the comparison of objects for equality.</summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer.Equals(System.Object,System.Object)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer.GetHashCode(System.Object)">
            <summary>Returns a hash code for the specified object.</summary>
            <returns>A hash code for the specified object.</returns>
            <param name="obj">The object for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1">
            <summary>Defines methods to support the comparison of objects for equality.</summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <param name="x">The first object of type <typeparamref name="T" /> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T" /> to compare.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplIEqualityComparer`1.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <returns>A hash code for the specified object.</returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMath.Truncate(System.Decimal)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number. 
            </summary>
            <param name="d">The value to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplMath.Truncate(System.Double)">
            <summary>
            Calculates the integral part of a specified double-precision floating-point number. 
            </summary>
            <param name="d">The value to truncate.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplInt64">
            <summary>
            Represents a 64-bit signed integer.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplInt64"/> class.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.#ctor(System.Object)">
            <summary>
            Prevents a default instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplInt64"/> class from being created.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.op_Implicit(System.UInt32)~SharpKit.JavaScript.Private.JsImplInt64">
            <summary>
            Converts the value to JsImplInt64.
            </summary>
            <param name="value">The value.</param>
            <returns>JsImplInt64</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.op_Explicit(System.Int32)~SharpKit.JavaScript.Private.JsImplInt64">
            <summary>
            Converts the value to JsImplInt64.
            </summary>
            <param name="value">The value.</param>
            <returns>JsImplInt64</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplInt64.op_Implicit(SharpKit.JavaScript.Private.JsImplInt64)~SharpKit.JavaScript.JsNumber">
            <summary>
            Jses the number.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="F:SharpKit.JavaScript.Private.DateTimeKind.Unspecified">
            <summary>The time represented is not specified as either local time or Coordinated Universal Time (UTC).</summary>
        </member>
        <member name="F:SharpKit.JavaScript.Private.DateTimeKind.Utc">
            <summary>The time represented is UTC.</summary>
        </member>
        <member name="F:SharpKit.JavaScript.Private.DateTimeKind.Local">
            <summary>The time represented is local time.</summary>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplRandom">
            <summary>
            Represents a pseudo-random number generator, a device that produces a 
            sequence of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="F:SharpKit.JavaScript.Private.JsImplRandom.MaxValue">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.#ctor">
            <summary>
            Creates a random number generator using the time of day in milliseconds as
            the seed.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.#ctor(System.Int32)">
            <summary>
            Creates a random number generator initialized with the given seed. 
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.Next">
            <summary>
            Returns a random integer greater than or equal to zero and
            less than or equal to <c>MaxRandomInt</c>. 
            </summary>
            <returns>The next random integer.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.Next(System.Int32)">
            <summary>
            Returns a positive random integer less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value. Must be greater than zero.</param>
            <returns>A positive random integer less than or equal to <c>maxValue</c>.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer within the specified range.
            </summary>
            <param name="minValue">The lower bound.</param>
            <param name="maxValue">The upper bound.</param>
            <returns>A random integer greater than or equal to <c>minValue</c>, and less than
            or equal to <c>maxValue</c>.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.NextFloat">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A single-precision floating point number greater than or equal to 0.0, 
            and less than 1.0.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, 
            and less than 1.0.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplList`1.ForEach(System.Action{`0})">
            <summary>Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</summary>
            <param name="action">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="action" /> is null.</exception>
        </member>
        <member name="T:SharpKit.JavaScript.Utils.Js">
            <summary>
            TODO: Inline all method implementations!!!
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.decodeURIComponent(System.String)">
            <summary>
            Returns the unencoded version of an encoded component of a Uniform Resource Identifier (URI). 
            </summary>
            <param name="encodedURIString"></param>
            <returns>The required encodedURIString argument is a value representing an encoded URI component.A URIComponent is part of a complete URI. If the encodedURIString is not valid, a URIError occurs. 
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.encodeURIComponent(System.String)">
            <summary>
            Encodes a text string as a valid component of a Uniform Resource Identifier (URI). 
            </summary>
            <param name="encodedURIString"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.encodeURI(System.String)">
            <summary>
            Encodes a text string as a valid Uniform Resource Identifier (URI) 
            </summary>
            <param name="URIString"></param>
            <returns></returns>
        </member>
        <member name="M:SharpKit.JavaScript.Utils.Js.decodeURI(System.String)">
            <summary>
            Returns the unencoded version of an encoded Uniform Resource Identifier (URI). 
            </summary>
            <param name="URIString"></param>
            <returns></returns>
        </member>
        <member name="T:SharpKit.JavaScript.Private.ISerializable">
            <summary>Allows an object to control its own serialization and deserialization.</summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplNotSupportedException">
            <summary>The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture.</summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message.</summary>
            <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.NotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplStack`1">
            <summary>
            Implements System.Collections.Generic.Stack &lt;T&gt;
            </summary>
            <remarks>
            A stack is a last-in first-out (LIFO) collection. 
            </remarks>
            <see href="http://en.wikipedia.org/wiki/Stack_(abstract_data_type)"/>
            <typeparam name="T">The type of objects in the collection.</typeparam>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplStack`1"/> class.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Clear">
            <summary>
            Clears all elements from the stack.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.ToArray">
            <summary>
            Returns the collection as an array, leaving all elements on the stack.
            </summary>
            <returns>An array.</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Push(`0)">
            <summary>
            Pushes the specified item onto the stack.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Pop">
            <summary>
            Pops and returns an item from the top of the stack.
            </summary>
            <returns></returns>
            <exception cref="T:SharpKit.JavaScript.JsError"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Peek">
            <summary>
            Returns the element at the top of the stack, without removing it.
            </summary>
            <returns></returns>
            <exception cref="T:SharpKit.JavaScript.JsError"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.Contains(`0)">
            <summary>
            Determines whether this stack contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if this stack contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStack`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SharpKit.JavaScript.Private.JsImplUInt32">
            <summary>
            Represents a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplUInt32"/> class.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.#ctor(System.Object)">
            <summary>
            Prevents a default instance of the <see cref="T:SharpKit.JavaScript.Private.JsImplUInt32"/> class from being created.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.op_Implicit(System.UInt32)~SharpKit.JavaScript.Private.JsImplUInt32">
            <summary>
            Converts the value to JsImplUInt32.
            </summary>
            <param name="value">The value.</param>
            <returns>JsImplUInt32</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.op_Explicit(System.Int32)~SharpKit.JavaScript.Private.JsImplUInt32">
            <summary>
            Converts the value to JsImplUInt32.
            </summary>
            <param name="value">The value.</param>
            <returns>JsImplUInt32</returns>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplUInt32.op_Implicit(SharpKit.JavaScript.Private.JsImplUInt32)~SharpKit.JavaScript.JsNumber">
            <summary>
            Jses the number.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:AssemblyDoc">
            <summary>
            SharpKit library for Clr mode, .NET runtime implementation written in pure JavaScript.
            This library supports namespaces, classes, generics, interfaces, enums, delegates, LINQ, reflection and many other .NET features.
            To use this library, you must include the jsclr.js script and call the Compile() method.
            Clr scripts have no dependencies, and you can include your own clr scripts in any order you want.
            </summary>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Boolean)">
            <summary>
            Inserts the string representation of a specified Unicode character into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Byte)">
            <summary>
            Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Char)">
            <summary>
            Inserts the string representation of a specified Unicode character into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Char[])">
            <summary>
            Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Decimal)">
            <summary>
            Inserts the string representation of a decimal number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Double)">
            <summary>
            Inserts the string representation of a double number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Int16)">
            <summary>
            Inserts the string representation of a short number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts the string representation of an int number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Int64)">
            <summary>
            Inserts the string representation of a long number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the string representation of an object into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.SByte)">
            <summary>
            Inserts the string representation of a signed byte number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Single)">
            <summary>
            Inserts the string representation of a float number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.String)">
            <summary>
            Inserts the string representation of a string into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.UInt16)">
            <summary>
            Inserts the string representation of an unsigned short number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.UInt32)">
            <summary>
            Inserts the string representation of an unsigned int number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.UInt64)">
            <summary>
            Inserts the string representation of an unsigned long number into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.String,System.Int32)">
            <summary>
            Inserts one or more copies of a specified string into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <param name="count">The number of times to insert <para>value</para>.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.Insert(System.Int32,System.Char[],System.Int32)">
            <summary>
            Inserts one or more copies of a specified character array into this instance at the specified character position.
            </summary>
            <param name="index">The position in this instance where insertion begins.</param>
            <param name="value">The value to insert.</param>
            <param name="count">The number of times to insert <para>value</para>.</param>
            <returns>A reference to this instance after the insert operation has completed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>index</para> is less than zero or greater than the length of this instance.</exception>
        </member>
        <member name="M:SharpKit.JavaScript.Private.JsImplStringBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SharpKit.JavaScript.Private.JsImplStringBuilder.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
            <exception cref="T:System.Exception">Not Implemented</exception>
        </member>
    </members>
</doc>

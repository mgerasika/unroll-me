/* Generated by SharpKit 5 v5.4.4 */

if (typeof(SharpKitWebApp) == "undefined")
    var SharpKitWebApp = {};
SharpKitWebApp.map = function (){
    this._items =  [];
    this._cells = 0;
    this._res1 = null;
    this._rows = 0;
};
SharpKitWebApp.map._inst = new SharpKitWebApp.map();
SharpKitWebApp.map.inst = function (){
    return SharpKitWebApp.map._inst;
};
SharpKitWebApp.map.prototype.init = function (rows, cells){
    this._rows = rows;
    this._cells = cells;
    this._res1 = document.getElementById("res") instanceof HTMLElement ? document.getElementById("res") : null;
    this._res1.style.width = (rows * (10)) + "em";
    this._res1.style.height = (cells * (10)) + "em";
};
SharpKitWebApp.map.prototype.getRows = function (){
    return this._rows;
};
SharpKitWebApp.map.prototype.invalidate = function (){
    for (var i = 0,len = this._items.length; i < len; ++i){
        var item = this._items[i];
        item.invalidate();
    }
};
SharpKitWebApp.map.prototype.load = function (maps){
    for (var i = 0,len = maps.length; i < len; ++i){
        var map = maps[i];
        var type = map["_type"];
        var x = parseInt(map["_x"].toString(), 10);
        var y = parseInt(map["_y"].toString(), 10);
        var f = js.utils.toBool(map["_fixed"]);
        var str = "new SharpKitWebApp[\'" + type + "\'](\'" + type + "\'," + x + "," + y + "," + f + ")";
        var item = js.eval(str);
        this._items.push(item);
    }
    var div = document.createElement('div');
    for (var i = 0,len = this._items.length; i < len; ++i){
        var item = this._items[i];
        item.render(div);
    }
    this._res1.appendChild(div);
    this.invalidate();
};
SharpKitWebApp.map.prototype.save = function (){
    var str = js.json.serealize(this._items);
    return str;
};
SharpKitWebApp.map.prototype.addItem = function (item){
    this._items.push(item);
    item.render(this._res1);
};
SharpKitWebApp.map.prototype.removeItem = function (item){
    js.utils.remove(this._items, item);
    var div = item.getDiv();
    div.parentNode.removeChild(div);
};
SharpKitWebApp.map.prototype.canMoveUp = function (item){
    var res = this._isFree(item.getX(), item.getY() - 1);
    return res;
};
SharpKitWebApp.map.prototype.canMoveDown = function (item){
    var res = this._isFree(item.getX(), item.getY() + 1);
    return res;
};
SharpKitWebApp.map.prototype.canMoveLeft = function (item){
    var res = this._isFree(item.getX() - 1, item.getY());
    return res;
};
SharpKitWebApp.map.prototype.canMoveRight = function (item){
    var res = this._isFree(item.getX() + 1, item.getY());
    return res;
};
SharpKitWebApp.map.prototype.canMove = function (item, x, y){
    var res = false;
    if (this._isFree(x, y)){
        do{
            if ((js.math.abs(item.getX() - x) >= 1) && js.math.abs(item.getY() - y) >= 1){
                break;
            }
            if (js.math.abs(item.getX() - x) >= 2){
                js.assert(js.math.abs(item.getY() - y) == 0);
                var flag = false;
                for (var i = js.math.min(item.getX(), x),len = js.math.max(item.getX(), x); i < len; ++i){
                    if (item.getX() == i && item.getY() == y){
                        continue;
                    }
                    if (!this._isFree(i, y)){
                        flag = true;
                        break;
                    }
                }
                if (flag){
                    break;
                }
            }
            if (js.math.abs(item.getY() - y) >= 1){
                js.assert(js.math.abs(item.getX() - x) == 0);
                var flag = false;
                for (var i = js.math.min(item.getY(), y),len = js.math.max(item.getY(), y); i < len; ++i){
                    if (item.getX() == x && item.getY() == i){
                        continue;
                    }
                    if (!this._isFree(x, i)){
                        flag = true;
                        break;
                    }
                }
                if (flag){
                    break;
                }
            }
            res = true;
        }
        while (false)
    }
    return res;
};
SharpKitWebApp.map.prototype.canContinue = function (item){
    var res = false;
    if (item.getType() == "leftToRightItem"){
    }
    return res;
};
SharpKitWebApp.map.prototype.getItems = function (){
    return this._items;
};
SharpKitWebApp.map.prototype.getItemById = function (id){
    var res = null;
    for (var i = 0,len = this._items.length; i < len; ++i){
        var item = this._items[i];
        if (item.getId() == id){
            res = item;
            break;
        }
    }
    return res;
};
SharpKitWebApp.map.prototype.getItemByXY = function (x, y){
    var res = null;
    for (var i = 0,len = this._items.length; i < len; ++i){
        var item = this._items[i];
        if (item.getX() == x && item.getY() == y){
            res = item;
            break;
        }
    }
    return res;
};
SharpKitWebApp.map.prototype._isFree = function (x, y){
    var res = false;
    if (x >= 0 && x < this._cells && y >= 0 && y < this._rows){
        var item = this.getItemByXY(x, y);
        res = (item == null);
    }
    return res;
};


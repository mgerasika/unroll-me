/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(SharpKitWebApp) == "undefined")
    var SharpKitWebApp = {};
SharpKitWebApp.app = function (){
    this._button = 0;
    this._diffXY = null;
    this._isDesignMode = false;
    this._item = null;
};
SharpKitWebApp.app.prototype.init = function (){
    SharpKitWebApp.map.inst().init(4, 4);
    var div = document.getElementById("res") instanceof HTMLElement ? document.getElementById("res") : null;
    var checkFontSize = document.getElementById("checkFontSize");
    var emWidth = checkFontSize.offsetWidth;
    var mustBeWidth = (div.offsetWidth / SharpKitWebApp.map.inst().getRows());
    var bodyFontSize = document.body.style.fontSize.replace("px", "");
    var bodyFontSizeInt = parseInt(bodyFontSize, 10);
    var newFontSize = (bodyFontSizeInt * mustBeWidth) / emWidth;
    document.body.style.fontSize = "10px";
    js.attach(div, "mousedown", js.bind($CreateDelegate(this, this._mouseDownHandler), this));
    js.attach(div, "touchstart", js.bind($CreateDelegate(this, this._mouseDownHandler), this));
    js.attach(div, "mousemove", js.bind($CreateDelegate(this, this._mouseMoveHandler), this));
    js.attach(div, "touchmove", js.bind($CreateDelegate(this, this._mouseMoveHandler), this));
    js.attach(div, "mouseup", js.bind($CreateDelegate(this, this._mouseUpHandler), this));
    js.attach(div, "touchend", js.bind($CreateDelegate(this, this._mouseUpHandler), this));
    js.attach(document.body, "keydown", js.bind($CreateDelegate(this, this._keyDownHandler), this));
};
SharpKitWebApp.app.prototype.setIsDesignMode = function (val){
    this._isDesignMode = val;
};
SharpKitWebApp.app.prototype.isDesignMode = function (){
    return this._isDesignMode;
};
SharpKitWebApp.app.prototype.moveBallComplete = function (it, b){
    var inSide = b.getInSide();
    if (inSide == SharpKitWebApp.ESlide.center && it.isFinishItem()){
        window.alert("Success level.");
    }
    else {
        var x = it.getX();
        var y = it.getY();
        var side = SharpKitWebApp.ESlide.none;
        if (inSide == SharpKitWebApp.ESlide.top){
            y--;
            side = SharpKitWebApp.ESlide.bottom;
        }
        else if (inSide == SharpKitWebApp.ESlide.bottom){
            y++;
            side = SharpKitWebApp.ESlide.top;
        }
        else if (inSide == SharpKitWebApp.ESlide.left){
            x--;
            side = SharpKitWebApp.ESlide.right;
        }
        else if (inSide == SharpKitWebApp.ESlide.right){
            x++;
            side = SharpKitWebApp.ESlide.left;
        }
        var newItem = SharpKitWebApp.map.inst().getItemByXY(x, y);
        if (newItem != null && newItem.hasSide(side)){
            b.setInSide(side);
            newItem.moveBall(b, js.bind($CreateAnonymousDelegate(this, function (){
                this.moveBallComplete(newItem, b);
            }), this));
        }
        else {
            window.alert("Failed level.");
        }
    }
};
SharpKitWebApp.app.prototype.setItem = function (item){
    if (this._item != null && (this._item != item)){
        js.removeClass(this._item.getDiv(), "active");
    }
    this._item = item;
    if (this._item != null){
        js.addClass(this._item.getDiv(), "active");
    }
};
SharpKitWebApp.app.prototype.getItem = function (){
    return this._item;
};
SharpKitWebApp.app.prototype._mouseDownHandler = function (ev){
    var target = js.getSrcElement(ev) instanceof HTMLElement ? js.getSrcElement(ev) : null;
    this._button = 1;
    if (js.hasClass(target, "item")){
        var xy = js.getEventXY(ev) instanceof Object ? js.getEventXY(ev) : null;
        var offset = js.getXY(target) instanceof Object ? js.getXY(target) : null;
        xy["x"] = parseInt(xy["x"].toString(), 10) - parseInt(offset["x"].toString(), 10);
        xy["y"] = parseInt(xy["y"].toString(), 10) - parseInt(offset["y"].toString(), 10);
        this._diffXY = xy;
        var item = SharpKitWebApp.map.inst().getItemById(target.getAttribute("id"));
        this.setItem(item);
    }
};
SharpKitWebApp.app.prototype._mouseMoveHandler = function (ev){
    if ((this.getItem() != null && (this._button == 1)) && (!this.getItem().isFixed() || this.isDesignMode())){
        var xy = js.getEventXY(ev) instanceof Object ? js.getEventXY(ev) : null;
        var offset = js.getXY(document.getElementById("res")) instanceof Object ? js.getXY(document.getElementById("res")) : null;
        xy["x"] = xy["x"] - offset["x"];
        xy["y"] = xy["y"] - offset["y"];
        js.assert(xy["x"] >= 0);
        js.assert(xy["y"] >= 0);
        var x1 = parseInt(xy["x"].toString(), 10);
        var y1 = parseInt(xy["y"].toString(), 10);
        var x = x1 / this._item.getDiv().offsetWidth;
        var y = y1 / this._item.getDiv().offsetHeight;
        console.log("x=" + x + " y=" + y);
        if (this._item.getX() != x || this._item.getY() != y){
            if (SharpKitWebApp.map.inst()._isFree(x, y) && SharpKitWebApp.map.inst().canMove(this._item, x, y)){
                this.getItem().moveTo(x, y);
            }
        }
    }
};
SharpKitWebApp.app.prototype._mouseUpHandler = function (ev){
    this._button = 0;
    if (this._item != null){
    }
};
SharpKitWebApp.app.prototype._keyDownHandler = function (ev){
    var keyCode = js.getEventKeyCode(ev);
    console.log(keyCode);
    if (keyCode == 38 && SharpKitWebApp.map.inst().canMoveUp(this._item)){
        this._item.moveUp();
    }
    else if (keyCode == 40 && SharpKitWebApp.map.inst().canMoveDown(this._item)){
        this._item.moveDown();
    }
    else if (keyCode == 37 && SharpKitWebApp.map.inst().canMoveLeft(this._item)){
        this._item.moveLeft();
    }
    else if (keyCode == 39 && SharpKitWebApp.map.inst().canMoveRight(this._item)){
        this._item.moveRight();
    }
};


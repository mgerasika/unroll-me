/* Generated by SharpKit 5 v5.4.4 */
if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}


if (typeof(SharpKitWebApp) == "undefined")
    var SharpKitWebApp = {};
SharpKitWebApp.client = function (){
    this._turnClientId = null;
    this._table = null;
    this._figure = 0;
    this._turn = null;
    this.init();
};
SharpKitWebApp.client.prototype.get_ClientId = function (){
    var url = window.document.location.href;
    var idx = url.lastIndexOf("?") + 1;
    var name = url.substring(idx);
    var arr = name.split("=");
    name = arr[1].toString();
    return name;
};
SharpKitWebApp.client.prototype.init = function (){
    commet.subscribe($CreateAnonymousDelegate(this, function (e){
        var r = e;
        if (r instanceof SharpKitWebApp.data.startGameResponse){
            var response = r instanceof SharpKitWebApp.data.startGameResponse ? r : null;
            this.OnStartGame(response);
        }
        if (r instanceof SharpKitWebApp.data.messageResponse){
            var response = r instanceof SharpKitWebApp.data.messageResponse ? r : null;
        }
        if (r instanceof SharpKitWebApp.data.turnResponse){
            var response = r instanceof SharpKitWebApp.data.turnResponse ? r : null;
            if (response.message == ""){
                var row = this._table.rows[response.y];
                var cell = row.cells[response.x];
                cell.innerHTML = (response.figure == 1) ? "x" : "o";
                if ((response.figure == 1)){
                    js.addClass(cell, "tableCellX");
                }
                else {
                    js.addClass(cell, "tableCell0");
                }
                this._turnClientId = response.nextClientId;
                this.RefreshTurn();
            }
            else if (response.message == "turn again"){
            }
            else if (response.message == "winn"){
                window.alert("You winn");
            }
            else if (response.message == "loss"){
                window.alert("You loss");
            }
            else if (response.message == "equal"){
                window.alert("equal");
            }
        }
        if (r instanceof SharpKitWebApp.data.connectResponse){
            this.OnConnectResponse(r instanceof SharpKitWebApp.data.connectResponse ? r : null);
        }
        if (r instanceof SharpKitWebApp.data.disconnectResponse){
            var response = r instanceof SharpKitWebApp.data.disconnectResponse ? r : null;
        }
    }));
    var myButton = document.createElement('div');
    js.addClass(myButton, "button");
    myButton.innerHTML = "[Connect]";
    myButton.addEventListener("click", $CreateDelegate(this, this.OnConnectClick));
    document.body.appendChild(myButton);
    window.addEventListener("unload", $CreateDelegate(this, this.OnBeforeUnload));
};
SharpKitWebApp.client.prototype.OnStartGame = function (response){
    this._figure = (response.FirstClientId == this.get_ClientId()) ? 1 : 2;
    this._turnClientId = response.FirstClientId;
    this.RefreshTurn();
};
SharpKitWebApp.client.prototype.RefreshTurn = function (){
    if (this._turnClientId == this.get_ClientId()){
        js.removeClass(this._turn, "notMyTurn");
        js.addClass(this._turn, "myTurn");
    }
    else {
        js.removeClass(this._turn, "myTurn");
        js.addClass(this._turn, "notMyTurn");
    }
};
SharpKitWebApp.client.prototype.OnConnectClick = function (evt){
    commet.connect(this.get_ClientId());
};
SharpKitWebApp.client.prototype.OnConnectResponse = function (response){
    this._turn = document.createElement('div');
    js.addClass(this._turn, "turn");
    document.body.appendChild(this._turn);
    this._table = document.createElement('table');
    js.attach(this._table, "click", $CreateDelegate(this, this.onTableClick));
    js.addClass(this._table, "table");
    for (var y = 0; y < 3; ++y){
        var row = document.createElement('tr');
        this._table.appendChild(row);
        for (var x = 0; x < 3; ++x){
            var cell = document.createElement('td');
            row.appendChild(cell);
            js.addClass(cell, "tableCell");
        }
    }
    document.body.appendChild(this._table);
};
SharpKitWebApp.client.prototype.onTableClick = function (evt){
    if (this._turnClientId == this.get_ClientId()){
        var el = evt.target;
        if (el instanceof HTMLTableCellElement){
            var cell = el;
            var row = cell.parentNode;
            var request = new SharpKitWebApp.data.turnRequest();
            request.x = cell.cellIndex;
            request.y = row.rowIndex;
            request.clientId = this.get_ClientId();
            request.figure = this._figure;
            server.send(request);
        }
    }
};
SharpKitWebApp.client.prototype.OnBeforeUnload = function (evt){
    commet.disconnect();
};

